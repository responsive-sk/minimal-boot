<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/>
    <meta name="description" content="<?= $e($description ?? 'Mezzio Light Application') ?>"/>
    <meta name="author" content="<?= $e($author ?? 'responsive.sk Team') ?>"/>
    <meta name="generator" content="Mezzio"/>
    <meta name="theme-color" content="#ffffff"/>

    <title><?= $e($title ?? 'Mezzio Light Application') ?></title>

    <link rel="apple-touch-icon" sizes="180x180" href="<?= $asset('images/app/favicon/apple-touch-icon.png') ?>"/>
    <link rel="icon" type="image/png" sizes="32x32" href="<?= $asset('images/app/favicon/favicon-32x32.png') ?>"/>
    <link rel="icon" type="image/png" sizes="16x16" href="<?= $asset('images/app/favicon/favicon-16x16.png') ?>"/>
    <link rel="manifest" href="<?= $asset('images/app/favicon/site.webmanifest') ?>"/>
    <link rel="mask-icon" href="<?= $asset('images/app/favicon/safari-pinned-tab.svg') ?>" color="#5bbad5"/>
    <meta name="msapplication-TileColor" content="#da532c"/>

    <!-- Google Fonts - Source Sans Pro -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400;600;700&display=swap" rel="stylesheet">

    <?php
    // Determine CSS URL: explicit cssUrl > ThemeService > fallback
    if (isset($cssUrl)) {
        $finalCssUrl = $cssUrl;
    } elseif (isset($themeService)) {
        $finalCssUrl = $themeService->getThemeCssUrl();
    } else {
        $finalCssUrl = 'themes/bootstrap/assets/main.css';
    }
    ?>
    <!-- Preload critical CSS to prevent FOUC -->
    <link rel="preload" href="<?= $asset($finalCssUrl) ?>" as="style" onload="this.onload=null;this.rel='stylesheet';document.documentElement.classList.add('theme-loaded');">
    <noscript><link rel="stylesheet" href="<?= $asset($finalCssUrl) ?>"></noscript>

    <!-- CSS loading detection -->
    <script>
        // Global Bootstrap dropdown initialization function
        function initBootstrapDropdowns() {
            if (typeof bootstrap !== 'undefined' && bootstrap.Dropdown) {
                // Initialize all dropdowns
                const dropdownElementList = document.querySelectorAll('.dropdown-toggle');
                const dropdownList = [...dropdownElementList].map(dropdownToggleEl => {
                    return new bootstrap.Dropdown(dropdownToggleEl);
                });

                console.log('Bootstrap dropdowns initialized:', dropdownList.length);
            } else {
                console.warn('Bootstrap JavaScript not loaded, retrying...');
                // Retry after Bootstrap JS loads
                setTimeout(initBootstrapDropdowns, 100);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Test Bootstrap CSS loading
            const testEl = document.createElement('div');
            testEl.className = 'container';
            testEl.style.display = 'none';
            document.body.appendChild(testEl);

            const maxWidth = window.getComputedStyle(testEl).maxWidth;
            if (maxWidth && maxWidth !== 'none') {
                document.documentElement.classList.add('theme-loaded');
            }

            document.body.removeChild(testEl);

            // Fallback
            setTimeout(() => {
                document.documentElement.classList.add('theme-loaded');
            }, 100);

            // Start initialization when DOM is ready
            initBootstrapDropdowns();
        });
    </script>

    <!-- Prevent FOUC (Flash of Unstyled Content) for theme -->
    <script>
        (function() {
            // Get saved theme or system preference
            const savedTheme = localStorage.getItem('theme');
            const systemPrefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            const theme = savedTheme || (systemPrefersDark ? 'dark' : 'light');

            // Set theme immediately to prevent flash
            document.documentElement.setAttribute('data-bs-theme', theme);
        })();
    </script>

    <style>
        /* Critical CSS to prevent FOUC */
        body {
            font-family: 'Source Sans Pro', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #ffffff;
        }

        /* Critical Bootstrap-like styles */
        .container { max-width: 1140px; margin: 0 auto; padding: 0 15px; }
        .navbar { background-color: #f8f9fa; border-bottom: 1px solid #dee2e6; }
        .fixed-top { position: fixed; top: 0; right: 0; left: 0; z-index: 1030; }
        .app-content { padding-top: 60px; }

        /* Critical heading styles */
        h1 {
            font-size: 2.5rem;
            font-weight: 400;
            line-height: 1.2;
            margin-bottom: 0.5rem;
        }

        /* Hide content until CSS loads */
        .theme-loading {
            visibility: hidden;
        }

        .theme-loaded .theme-loading {
            visibility: visible;
        }

        /* Theme toggle button */
        .theme-toggle {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--bs-primary, #0d6efd);
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .theme-toggle:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

        /* Dark mode support */
        [data-bs-theme="dark"] {
            color-scheme: dark;
        }

        [data-bs-theme="dark"] body {
            background-color: #212529;
            color: #f8f9fa;
        }

        [data-bs-theme="dark"] .navbar-light {
            background-color: #343a40 !important;
        }

        [data-bs-theme="dark"] .navbar-light .navbar-brand,
        [data-bs-theme="dark"] .navbar-light .navbar-nav .nav-link {
            color: #f8f9fa !important;
        }

        [data-bs-theme="dark"] .card {
            background-color: #343a40;
            border-color: #495057;
            color: #f8f9fa;
        }

        [data-bs-theme="dark"] .btn-primary {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }

        /* Navigation theme toggle (slider style) */
        .nav-theme-toggle {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 30px;
            margin: 0;
        }

        .nav-theme-toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .nav-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: 0.3s;
            border-radius: 30px;
        }

        .nav-slider:before {
            position: absolute;
            content: "üåô";
            height: 26px;
            width: 26px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: 0.3s;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
        }

        .nav-theme-toggle input:checked + .nav-slider {
            background-color: #007bff;
        }

        .nav-theme-toggle input:checked + .nav-slider:before {
            transform: translateX(30px);
            content: "‚òÄÔ∏è";
        }

        [data-bs-theme="dark"] .nav-slider {
            background-color: #495057;
        }

        [data-bs-theme="dark"] .nav-slider:before {
            background-color: #f8f9fa;
        }

        /* Smooth theme transitions */
        *, *::before, *::after {
            transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
        }
    </style>
</head>

<body class="app theme-loading <?= $body_class ?? '' ?>">
    <div class="app-wrapper">
        <nav class="navbar navbar-expand-md navbar-light bg-light fixed-top">
            <div class="container">
                <a class="navbar-brand" href="<?= $url('page::index') ?>">
                    <img src="/images/app/logo.svg" width="150" height="30" alt="responsive.sk"/>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarHeader"
                        aria-controls="navbarHeader" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarHeader">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="pageDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Pages</a>
                            <div class="dropdown-menu" aria-labelledby="pageDropdown">
                                <a class="dropdown-item" href="/page/about">About Us</a>
                                <a class="dropdown-item" href="/page/privacy">Privacy Policy</a>
                            </div>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="https://github.com/responsive-sk/minimal-boot/" target="_blank">GitHub</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="https://responsive-sk.github.io/minimal-boot/" target="_blank">Documentation</a>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="demoDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Demos</a>
                            <div class="dropdown-menu" aria-labelledby="demoDropdown">
                                <a class="dropdown-item" href="/demo">
                                    <i class="bi bi-palette me-2"></i>TailwindCSS + Alpine.js
                                </a>
                                <a class="dropdown-item" href="/demo/bootstrap">
                                    <i class="bi bi-bootstrap me-2"></i>Bootstrap 5
                                </a>
                            </div>
                        </li>
                    </ul>

                    <!-- Theme Selector -->
                    <div class="d-flex align-items-center">
                        <span class="me-2 text-muted small">Theme:</span>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" id="themeDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <?php
                                if (isset($themeService)) {
                                    $themeConfig = $themeService->getCurrentThemeConfig();
                                    echo $e($themeConfig['name']);
                                } else {
                                    echo 'Bootstrap 5';
                                }
                                ?>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="themeDropdown">
                                <?php
                                if (isset($themeService)) {
                                    $availableThemes = $themeService->getAvailableThemes();
                                    $currentTheme = $themeService->getCurrentTheme();
                                } else {
                                    $availableThemes = [
                                        'bootstrap' => ['name' => 'Bootstrap 5', 'description' => 'Modern Bootstrap 5 with custom styling'],
                                        'tailwind' => ['name' => 'Tailwind CSS', 'description' => 'Utility-first CSS framework with Alpine.js']
                                    ];
                                    $currentTheme = 'bootstrap';
                                }
                                foreach ($availableThemes as $themeKey => $theme):
                                ?>
                                    <li>
                                        <a class="dropdown-item theme-switch-link <?= $themeKey === $currentTheme ? 'active' : '' ?>"
                                           href="/theme/switch?theme=<?= $e($themeKey) ?>"
                                           data-theme="<?= $e($themeKey) ?>">
                                            <strong><?= $e($theme['name']) ?></strong>
                                            <br>
                                            <small class="text-muted"><?= $e($theme['description']) ?></small>
                                        </a>
                                    </li>
                                <?php endforeach ?>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <div class="app-content">
            <?= $content ?? '' ?>
        </div>

        <footer class="app-footer">
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <p>&copy; <?= date('Y') ?> Mezzio Light Application. All rights reserved.</p>
                    </div>
                    <div class="col-md-6 text-end">
                        <p>Powered by <a href="https://getmezzio.org/" target="_blank">Mezzio</a></p>
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <!-- Theme Toggle Button -->
    <button id="theme-toggle" class="theme-toggle" aria-label="Toggle between light and dark theme">
        <span class="theme-toggle-icon">üåô</span>
    </button>

    <!-- Theme change notification -->
    <div id="theme-notification" class="position-fixed top-0 start-50 translate-middle-x mt-3" style="z-index: 9999; display: none;">
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            <i class="bi bi-palette-fill me-2"></i>
            <span id="theme-message">Switched to dark theme</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>

    <?php
    // Determine JS URL: explicit jsUrl > ThemeService > fallback
    if (isset($jsUrl)) {
        $finalJsUrl = $jsUrl;
    } elseif (isset($themeService)) {
        $finalJsUrl = $themeService->getThemeJsUrl();
    } else {
        $finalJsUrl = 'js/app.js';
    }
    ?>
    <script src="<?= $asset($finalJsUrl) ?>" onload="initBootstrapDropdowns()"></script>

    <!-- Theme Toggle Script -->
    <script>
        // Dark mode functionality for both navigation and floating buttons
        const themeToggle = document.getElementById('theme-toggle');
        const navThemeCheckbox = document.getElementById('nav-theme-checkbox');
        const html = document.documentElement;
        const themeIcon = document.querySelector('.theme-toggle-icon');

        // Get current theme from HTML attribute (set by inline script)
        const currentTheme = html.getAttribute('data-bs-theme') || 'light';
        updateAllThemeIcons(currentTheme);

        // Add event listeners to both buttons
        if (themeToggle) {
            themeToggle.addEventListener('click', toggleTheme);
        }

        if (navThemeCheckbox) {
            navThemeCheckbox.addEventListener('change', toggleTheme);
        }

        function toggleTheme() {
            const currentTheme = html.getAttribute('data-bs-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

            // Add smooth transition
            document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';

            html.setAttribute('data-bs-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateAllThemeIcons(newTheme);
            showThemeNotification(newTheme);

            // Remove transition after animation
            setTimeout(() => {
                document.body.style.transition = '';
            }, 300);
        }

        function updateAllThemeIcons(theme) {
            const icon = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
            const ariaLabel = `Switch to ${theme === 'dark' ? 'light' : 'dark'} theme`;

            // Update floating button
            if (themeIcon) {
                themeIcon.textContent = icon;
            }
            if (themeToggle) {
                themeToggle.setAttribute('aria-label', ariaLabel);
            }

            // Update navigation checkbox
            if (navThemeCheckbox) {
                navThemeCheckbox.checked = theme === 'dark';
            }
        }

        function showThemeNotification(theme) {
            const notification = document.getElementById('theme-notification');
            const message = document.getElementById('theme-message');

            if (notification && message) {
                message.textContent = `Switched to ${theme} theme`;
                notification.style.display = 'block';

                // Auto-hide after 2 seconds
                setTimeout(() => {
                    const alert = notification.querySelector('.alert');
                    if (alert) {
                        alert.classList.remove('show');
                        setTimeout(() => {
                            notification.style.display = 'none';
                            alert.classList.add('show');
                        }, 150);
                    }
                }, 2000);
            }
        }

        // Theme switching functionality
        document.querySelectorAll('.theme-switch-link').forEach(function(link) {
            link.addEventListener('click', function(e) {
                e.preventDefault();

                const theme = this.dataset.theme;

                // Show loading state
                const button = document.getElementById('themeDropdown');
                const originalText = button.textContent;
                button.textContent = 'Switching...';
                button.disabled = true;

                // Make AJAX request to switch theme
                fetch('/theme/switch', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ theme: theme })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Reload page to apply new theme
                        window.location.reload();
                    } else {
                        alert('Error switching theme: ' + (data.error || 'Unknown error'));
                        button.textContent = originalText;
                        button.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Theme switch error:', error);
                    alert('Error switching theme. Please try again.');
                    button.textContent = originalText;
                    button.disabled = false;
                });
            });
        });
    </script>
</body>
</html>
