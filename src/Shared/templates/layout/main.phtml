<!DOCTYPE html>
<html lang="sk" class="light">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="<?= isset($description) ? $this->escapeHtml($description) : 'TailwindCSS + Alpine.js Demo - Mezzio Application' ?>">
    <meta name="keywords" content="TailwindCSS, Alpine.js, utility-first CSS, reactive components, Mezzio">
    <meta name="author" content="Mezzio Minimal App">
    <title><?= isset($title) ? $this->escapeHtml($title) : 'TailwindCSS + Alpine.js Demo - Mezzio Application' ?></title>
    <link rel="icon" href="/favicon.ico" type="image/x-icon">

    <!-- Preconnect to external domains for faster loading -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <!-- Theme CSS with preload for critical resources -->
    <?php if (isset($cssUrl)): ?>
        <link rel="preload" href="<?= $cssUrl ?>" as="style" onload="this.onload=null;this.rel='stylesheet'">
        <noscript><link rel="stylesheet" href="<?= $cssUrl ?>"></noscript>
    <?php endif; ?>
    
    <style>
        /* Alpine.js cloak */
        [x-cloak] { display: none !important; }
        
        /* Dark mode variables */
        .dark {
            --tw-bg-opacity: 1;
            background-color: rgb(17 24 39 / var(--tw-bg-opacity));
            color: rgb(243 244 246);
        }
        
        /* Theme toggle button */
        .theme-toggle {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .theme-toggle:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }
        
        /* Smooth transitions for theme changes */
        * {
            transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
        }
        
        /* Custom scrollbar for dark mode */
        .dark::-webkit-scrollbar {
            width: 8px;
        }
        
        .dark::-webkit-scrollbar-track {
            background: #374151;
        }
        
        .dark::-webkit-scrollbar-thumb {
            background: #6b7280;
            border-radius: 4px;
        }
        
        .dark::-webkit-scrollbar-thumb:hover {
            background: #9ca3af;
        }
    </style>

    <!-- Prevent FOUC (Flash of Unstyled Content) for theme -->
    <script>
        (function() {
            // Get saved theme or system preference
            const savedTheme = localStorage.getItem('theme');
            const systemPrefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            const theme = savedTheme || (systemPrefersDark ? 'dark' : 'light');

            // Set theme immediately to prevent flash
            if (theme === 'dark') {
                document.documentElement.classList.add('dark');
                document.documentElement.classList.remove('light');
            } else {
                document.documentElement.classList.add('light');
                document.documentElement.classList.remove('dark');
            }
        })();
    </script>
</head>
<body class="bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
    <?= $this->content ?>
    
    <!-- Theme Toggle Button -->
    <button id="theme-toggle" class="theme-toggle" aria-label="Toggle between light and dark theme">
        <span class="theme-toggle-icon">🌙</span>
    </button>

    <!-- Theme change notification -->
    <div id="theme-notification" class="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 hidden">
        <div class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
            </svg>
            <span id="theme-message">Switched to dark theme</span>
        </div>
    </div>
    
    <!-- Theme JS (includes Alpine.js) -->
    <?php if (isset($jsUrl)): ?>
        <script defer src="<?= $jsUrl ?>"></script>
    <?php endif; ?>
    
    <!-- Theme Toggle Script -->
    <script>
        // Dark mode functionality for TailwindCSS
        const themeToggle = document.getElementById('theme-toggle');
        const html = document.documentElement;
        const themeIcon = document.querySelector('.theme-toggle-icon');

        // Only initialize theme functionality if elements exist
        if (themeToggle && themeIcon) {
            // Get current theme from HTML classes (set by inline script)
            const currentTheme = html.classList.contains('dark') ? 'dark' : 'light';
            updateThemeIcon(currentTheme);

            themeToggle.addEventListener('click', () => {
                const currentTheme = html.classList.contains('dark') ? 'dark' : 'light';
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

                updateTheme(newTheme);
                localStorage.setItem('theme', newTheme);
                showThemeNotification(newTheme);
            });

            function updateTheme(theme) {
                if (theme === 'dark') {
                    html.classList.add('dark');
                    html.classList.remove('light');
                } else {
                    html.classList.add('light');
                    html.classList.remove('dark');
                }
                updateThemeIcon(theme);
            }

            function updateThemeIcon(theme) {
                themeIcon.textContent = theme === 'dark' ? '☀️' : '🌙';
                themeToggle.setAttribute('aria-label',
                    `Switch to ${theme === 'dark' ? 'light' : 'dark'} theme`);
            }

            function showThemeNotification(theme) {
                const notification = document.getElementById('theme-notification');
                const message = document.getElementById('theme-message');

                if (notification && message) {
                    message.textContent = `Switched to ${theme} theme`;
                    notification.classList.remove('hidden');

                    // Auto-hide after 2 seconds
                    setTimeout(() => {
                        notification.classList.add('hidden');
                    }, 2000);
                }
            }

            // Listen for system theme changes
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
                if (!localStorage.getItem('theme')) {
                    updateTheme(e.matches ? 'dark' : 'light');
                }
            });
        }
    </script>
</body>
</html>
